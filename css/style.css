[class^="box"] {
    margin: 3rem auto;
    background-color: orangered;
}

/* CONTENEDORES FLEXIBLES */

.box {
    width: 300px;
    height: 300px;
}

/*la caja se adapta al 50% del tamaño de la pantalla*/
/*el height si lo indicamos con %, dependerá si la caja padre tiene definido la altura fija en px. */
.box-flexible {
    width: 50%;
    height: 20vh;
}

/*max i min width, indica la anchura máxima y mínima que puede tener el contenedor. En este caso, la caja mínimo tendrá una anchura de 480px, aunque la pantalla sea más pequeña. Y se irá agranando hasta un máximo de 960px, ahí se mantendrá aunque la pantalla sea más grande.

max i min height, indica la altura máxima y mínima que puede tener el contenedor. En el primer caso de este ejemplo, la altura no variará porque el contenedor no tiene contenido. En el segundo caso, como hay contendio, la altura es mayor, y si la pantalla es más pequeña, el contenedor crecerá hasta un máximo de 480px, a partir de ahí, el contenido interior se desbordará.  */
.box-flexible-2 {
    max-width: 960px;
    min-width: 280px;
    max-height: 480px;
    min-height: 280px ;
}

/*en este ejemplo se indica una alto y ancho en px, como width y height tienen prioridad sobre max y min, la caja es estática, con el tamaño indicado. */
.box-flexible-3 {
    max-width: 960px;
    min-width: 280px;
    max-height: 480px;
    min-height: 280px;
    width: 300px;
    height: 300px;
}

/*en este caso, de inicio la caja tiene 280px de altura, es la mínima, y de anchura es el 50% de la pantalla. Si la pantalla pantalla pasa de 960px, la anchura se mantiene en 960px, aunque tenga indicado un width de 50%. */

.box-flexible-4 {
    max-width: 960px;
    min-width: 280px;
    max-height: 480px;
    min-height: 280px;
    width: 50%;
    height: 20vh;
}


/* MULTIMEDIA FLEXIBLE */
img,
video,
iframe {
    max-width: 100%;
    height: auto;
}

/* forma antigua de aspect-radio*/

.responsive-media {
    position: relative;
    max-width: 100%;
    height: 0;
    /*
    Formato widescreen 16:9
    16 ancho --> 100%
    9 altura --> x
    (9*100) / 16 = 56.25
    */
    padding-bottom: 56.25%; /*sirve para dar forma, no lo añadimos en height porque el height para aceptar % necesita que el padre tenga una altura fija*/
}

.responsive-media > * {
    position: absolute;
    width: 100%;
    height: 100%;
}

/* forma actual de aspect-radio*/
.aspect-ratio-16-9 {
    aspect-ratio: 4/3;
    aspect-ratio: 16/9;
    background-color: purple;
}

.aspect-ratio-1-1 {
    aspect-ratio: 1/1;
}

/* MEDIA QUERYS */

@media print  {
    @page {
        size:A5 landscape;
    }

    body {
        font-size: 10pt;
        font-family: serif;
        color: yellowgreen;
        background-color: black;
    }
}

/*Eliminar o reducir animaciones */

@media screen and (prefers-reduced-motion: no-preference) {
    html {
        scroll-behavior: auto;
        scroll-behavior: smooth;

    }
}

@media screen and (prefers-reduced-motion: reduce) {
    html {
        scroll-behavior: auto;
        scroll-behavior: smooth;

    }
}

/* Se adapta según la especificación de color del navegador del usuario*/
@media screen and (prefers-color-scheme: light) {
    html {
        background-color: white;
        color: #000;
    }
}

@media screen and (prefers-color-scheme: dark) {
    html {
        background-color: #000;
        color: teal;
    }
}

@media screen and (prefers-color-scheme: no-preference) {
    html {
        background-color: #000;
        color: teal;
    }
}

/* 
En Mobile First se utiliza min-width, que significa lo mínimo, del valor que des hacia arriba */
@media screen and (min-width: 480px) {
    html {
        background-color: lightpink;
    }
}

/*En Desktop se utiliza max-width, que significa lo máximo del valor que des hacia abajo*/
@media screen and (max-width: 1024px) {
    html {
        background-color: lightgreen;
    }
}

@media screen and (min-width: 1200px) {
    html {
        background-color: #fff;
    }
}

/* SUPPORTS */


@supports (grid-template-columns: subgrid){
    html {
        background-color: #000;
        color: greenyellow
    }
}

@supports not (grid-template-columns: subgrid){
    html {
        background-color: darkolivegreen;
        color: white
    }
}

@supports (display:grid) and (grid-template-columns:subgrid) {
    html {
        background-color: darkblue;
        color: lightseagreen
    }
}


@supports (display:grid) or (grid-template-columns:subgrid) {
    html {
        background-color: white;
        color: black
    }
}

/* CONTAINER QUERY */

/* Con la propiedad contain: layout inline-size style, activamos las características de container querys */
.card {
    border: thin solid #000;
    margin: 0 auto;
    max-width: 800px;
    contain: layout inline-size style;
}

.card-image {
    max-width: 100%;
    height: auto;
    object-fit: cover;
    object-position: 0 50%;
}

.card-content{
    padding: 1rem;
}

/* chrome://flags/ para activar la opción en Chrome*/
@container (min-width: 600px) {
    .card-container {
        display:flex;
    }

    .card-container > * {
        width: 50%;
        flex-basis: 50%:
    }
}

/* FLUID DESIGN */

/* Grid fluida  */

.fluid-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
}

.fluid-item {
    border: thin solid gray;
    padding: 2rem;
}

/* Texto fluido */

:root {
    --step--2: clamp(0.78rem, calc(0.77rem + 0.03vw), 0.80rem);
    --step--1: clamp(0.94rem, calc(0.92rem + 0.11vw), 1.00rem);
    --step-0: clamp(1.13rem, calc(1.08rem + 0.22vw), 1.25rem);
    --step-1: clamp(1.35rem, calc(1.28rem + 0.37vw), 1.56rem);
    --step-2: clamp(1.62rem, calc(1.50rem + 0.58vw), 1.95rem);
    --step-3: clamp(1.94rem, calc(1.77rem + 0.87vw), 2.44rem);
    --step-4: clamp(2.33rem, calc(2.08rem + 1.25vw), 3.05rem);
    --step-5: clamp(2.80rem, calc(2.45rem + 1.77vw), 3.82rem);
  }

  .step--2 { font-size: var(--step--2); }
  .step--1 { font-size: var(--step--1); }  
  .step-0 { font-size: var(--step-0); }  
  .step-1 { font-size: var(--step-1); }
  .step-2 { font-size: var(--step-2); }
  .step-3 { font-size: var(--step-3); }
  .step-4 { font-size: var(--step-4); }
  .step-5 { font-size: var(--step-5); }

  /* BONUS */
  /*
    14 = tamaño de la letra más pequeña
    18 = tamaño de la letra más grande
    300 = tamaño de viewport más pequeño
    1400 = tamaño de viewport más grande
  */
  body {
    font-size: calc(14px + (18 - 14) * ((100vw - 300px) / (1400 - 300)));
  }

  /* Contenedores fluidos */
  .box-fluid {
    width: clamp(400px, 60vw, 600px);
    height: clamp(200px, 30vh, 300px);
    
  }